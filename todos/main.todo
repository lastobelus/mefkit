# To Do

Goals:
  ☐ be able to deploy the walking skeleton of an app idea from a 1-2 hour storymapping session in less than 30 minutes
  ☐ have a CI'd and CD'd rails starter app that is always up-to-date (automatic CI/CD of gem, rails, ruby, node upgrades)
  ☐ rails app integration with github, with issue creation, action & screenshot recording

Base:
  Setup:
    ✔ add vscode settings @done(2019-05-18 17:35)
    ✔ add todos @done(2019-05-18 17:35)

  Development:
    Linting:
      ✔ rufo/rubocop settings, like in other projects @done(2019-06-18 18:27)
      ☐ eslint/prettier
    ✔ use overmind @done(2019-06-18 10:52)
    Start Working:
      ✔ itermocil file @done(2019-06-18 18:29)
      ☐ replace itermocil file with iterm python script, that is smart about what's already running
      ☐ open in browser
      support for 10m habit:
        ✔ start working, get next todo that takes < 10m @done(2019-06-18 19:40)
          ✔ work-on-mefkit, cds & runs itermocil @done(2019-06-18 19:40)
          ✔ itermocil edits this file @done(2019-06-18 19:40)
        then add next todo, and commit
    Optimization/Debugging:
      ✔ cp gems I've used before @done(2019-06-18 18:27)

  Specs:
    ✔ add high voltage and a home page @done(2019-06-18 10:57)
    ✔ add high voltage hello page @done(2019-06-18 10:57)
    ✔ setup guard @done(2019-06-20 18:30)
    ✔ setup show in browser from past projects @done(2019-06-20 19:04)
    ✔ setup rspec html matchers from past projects @done(2019-06-20 19:04)
    ✔ setup precompile assets in request specs @done(2019-06-20 19:04)
    ✔ spec high voltage home page @done(2019-06-20 19:04)
    ✔ spec link to hv hello page @done(2019-06-20 19:04)
    ☐ fix deprecation
       WARN Selenium [DEPRECATION] Selenium::WebDriver::Chrome#driver_path= is deprecated.

    ☐ CI with request spec
    ☐ add devise
    ☐ devise request specs, with CI
    ☐ action cable setup
    ☐ sidekiq setup
    ☐ cypress sidekiq hello world 
    ☐ cypress setup
    ☐ action cable badge hello world with cypress test
    ☐ cypress CI

  GUI/CSS:
    ✔ add tailwind @done(2019-06-24 11:31)
      ✔ tailwind helloworld on hello pages @done(2019-06-24 10:24)
      ✔ tailwind on home page @done(2019-06-24 11:30)
      ✘ spec that tailwind is loading @cancelled(2019-06-24 11:31)
    Learn Tailwind:
      https://tailwindcss.com/course/setting-up-tailwind-and-postcss/
    ☐ choose a powerful widget platform
      ☐ must be themeable
      ☐ must be built on a standard
      ☐ mdbootstrap?
    ☐ personalize the styles/colors
    ☐ add trix
    ☐ choose a datepicker
    ☐ evaluate https://flatpickr.js.org (see https://github.com/adrienpoly/rails_stimulus_flatpickr)


  Assets:
    ☐ remove asset pipeline (sprockets)
      https://medium.com/michelada-io/from-the-asset-pipeline-to-webpack-ce5a4bc323a9
      https://medium.com/@coorasse/goodbye-sprockets-welcome-webpacker-3-0-ff877fb8fa79
      
  Static Pages:
    ✔ add high-voltage @done(2019-06-20 19:04)

  Users:
    ✔ devise setup @done(2019-06-25 21:57)
    ✔ administrate setup @done(2019-06-25 21:57)
    ☐ login with github
      https://medium.com/@salmaeng71/devise-authentication-guide-with-github-omniauth-for-rails-application-220aa52d5b82
      ✔ add omniauth-github @done(2019-06-26 10:18)
      ✔ setup github application @done(2019-06-26 10:43)
      ☐ create a logo for github application
      ✔ document github application setup @done(2019-06-26 10:43)
      ☐ automate as much as possible of github application setup 
      ☐ implement callbacks controller
      ☐ review teesforthepeople
      ☐ research oauth best practices @next
        https://github.com/omniauth/omniauth/wiki/Managing-Multiple-Providers
      ☐ create identity record
      tests with admin model
      tests with user model
    ☐ login with google
    ☐ login with facebook
    verify both devise admins & devise users working
    style devise admin views
    style devise user views


  Templates/Components:
    do evil martians tutorial
    evaluate komposable/komponent
    consider forking slim and addding components
      `app-page#main.compact obj=@object`
      `  @app-nav.dark.skinny`
      `  @app-sidebar`
      `    = product_list`
      `  p Some Stuff`
      `  
      - this will be like `=render 'components/app-page', obj: @object`, but will set the root element id to main, and merge 'compact' into the root element css class. It expects there to be a child component `app-nav` to which it will merge css classes 'dark' and 'skinny'. It expects a child component `app-sidebar` to which it will yield `product_list`. It will yield `p Some Stuff` into the `app-page`
  Javascript:
    ☐ javascript setup. improvement on sp system
    ☐ install and learn stimulus
      ✔ install by generating new app with stimulus & copying bits @done(2019-05-28 11:26)
      ☐ https://blog.capsens.eu/stimulusjs-on-rails-101-f22a0818dff8
    ☐ review actioncable usage in sp-fulfillment and create some abstractions
    ☐ base has working actioncable OOB
    ☐ learn to use typescript
      ☐ bundle exec rails webpacker:install:typescript

  Caching, Sessions, Redis:
    ☐ install hiredis
    ☐ ensure redis setup working (specs)
    ☐ use redis for cache store (https://medium.com/@kirill_shevch/configuration-cache-and-rails-session-store-with-redis-b3ce6f64d1fc)
    ☐ use redis for cookie store
  Sidekiq:
    ☐ sidekiq setup based on sp
    ☐ useful abstractions & plugins
    ☐ worker generators
    ☐ base has working sidekiq OOB

  Generators:
    ☐ generator for index/edit/create/destroy (no show) scaffold
    ☐ generator for index with editable (bip) fields
    ☐ generator for popover editor in list
    ☐ generator for popover new in list

  Suspenders:
    ☐ review suspenders and pull the pieces I want

  Living Style Guide:

  Deployment:
    ☐ research economical alternatives to heroku for hosting multiple rails experiments, and choose one
    ☐ invest $50/month on hosting & ensure CI/CD of the base on that hosting
    CI of Deployment:
      spec that css is loaded by checking the style of an element
      spec that tailwind is minimized with postcss-purgecss


  Development: (2)
    investigate and use [Overmind](https://github.com/DarthSim/overmind)